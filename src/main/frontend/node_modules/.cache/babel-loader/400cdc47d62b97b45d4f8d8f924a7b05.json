{"ast":null,"code":"import isPromise from 'is-promise';\nexport default function errorMiddleware() {\n  return next => action => {\n    // If not a promise, continue on\n    if (!isPromise(action.payload)) {\n      return next(action);\n    }\n    /*\n     * Another solution would would be to include a property in `meta`\n     * and evaulate that property.\n     *\n     * if (action.meta.globalError === true) {\n     *   // handle error\n     * }\n     *\n     * The error middleware serves to dispatch the initial pending promise to\n     * the promise middleware, but adds a `catch`.\n     */\n    // Dispatch initial pending promise, but catch any errors\n\n\n    return next(action).catch(error => {\n      console.warn(error);\n      return error;\n    });\n  };\n}","map":{"version":3,"sources":["/home/nicolas/Documentos/Si/Practica/european_leagues/src/main/frontend/src/middleware.js"],"names":["isPromise","errorMiddleware","next","action","payload","catch","error","console","warn"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAOC,IAAI,IAAIC,MAAM,IAAI;AAEvB;AACA,QAAI,CAACH,SAAS,CAACG,MAAM,CAACC,OAAR,CAAd,EAAgC;AAC9B,aAAOF,IAAI,CAACC,MAAD,CAAX;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEM;;;AACA,WAAOD,IAAI,CAACC,MAAD,CAAJ,CAAaE,KAAb,CAAmBC,KAAK,IAAI;AACjCC,MAAAA,OAAO,CAACC,IAAR,CAAaF,KAAb;AAEA,aAAOA,KAAP;AACD,KAJM,CAAP;AAKH,GAxBD;AAyBD","sourcesContent":["import isPromise from 'is-promise';\n\nexport default function errorMiddleware() {\n  return next => action => {\n\n    // If not a promise, continue on\n    if (!isPromise(action.payload)) {\n      return next(action);\n    }\n    /*\n     * Another solution would would be to include a property in `meta`\n     * and evaulate that property.\n     *\n     * if (action.meta.globalError === true) {\n     *   // handle error\n     * }\n     *\n     * The error middleware serves to dispatch the initial pending promise to\n     * the promise middleware, but adds a `catch`.\n     */\n\n      // Dispatch initial pending promise, but catch any errors\n      return next(action).catch(error => {\n        console.warn(error);\n\n        return error;\n      });\n  };\n}"]},"metadata":{},"sourceType":"module"}